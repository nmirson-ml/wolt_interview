## Refer to Using dbt with Dagster, part one for info about this file:
## https://docs.dagster.io/integrations/dbt/using-dbt-with-dagster/part-one

name: 'wolt_data_model'
version: '1.0.0'
config-version: 2

# This setting configures which "profile" dbt uses for this project.
profile: 'wolt_data_model'

model-paths: ["models"]
analysis-paths: ["analyses"]
test-paths: ["tests"]
seed-paths: ["seeds"]
macro-paths: ["macros"]
snapshot-paths: ["snapshots"]
#packages-install-path: /dbt_packages

target-path: "target"  # directory which will store compiled SQL files
clean-targets:         # directories to be removed by `dbt clean`
  - "target"
  - "dbt_packages"

# Configuring models
# Full documentation: https://docs.getdbt.com/docs/configuring-models

# In this example config, we tell dbt to build all models in the example/ directory
# as tables. These settings can be overridden in the individual model files
# using the `{{ config(...) }}` macro.
models:
  +start: Jan 1 2020
  wolt_data_model:
    # Config indicated by + and applies to all files under models/example/
    +materialized: table

seeds:
  wolt_data_model:
    +enabled: true
    +schema: raw
    Wolt_snack_store_item_logs:
      LOG_ITEM_ID: varchar(64) # Unique log identifier
      ITEM_KEY: varchar(64) # Unique identifier for the item
      TIME_LOG_CREATED_UTC: timestamp # Timestamp for when the log was created
      PAYLOAD: json # Nested JSON field containing item details

    Wolt_snack_store_promos:
      PROMO_START_DATE: date # Start date of the promotion
      PROMO_END_DATE: date # End date of the promotion
      ITEM_KEY: varchar(64) # Unique identifier for the item
      PROMO_TYPE: varchar(32) # Type of the promotion (e.g., discount)
      DISCOUNT_IN_PERCENTAGE: int # Discount percentage applied during the promotion

    Wolt_snack_store_purchase_logs:
      TIME_ORDER_RECEIVED_UTC: timestamp # Timestamp for when the order was received
      PURCHASE_KEY: varchar(64) # Primary key for the purchase log
      CUSTOMER_KEY: varchar(64) # Unique identifier for the customer
      DELIVERY_DISTANCE_LINE_METERS: int # Distance in meters between store and customer
      WOLT_SERVICE_FEE: decimal(10, 2) # Service fee charged for the order
      COURIER_BASE_FEE: decimal(10, 2) # Base fee for courier delivery
      TOTAL_BASKET_VALUE: decimal(10, 2) # Total value of the basket (excluding fees)
      ITEM_BASKET_DESCRIPTION: json # JSON array with items and quantities in the basket